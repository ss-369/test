package com.sismics.reader.core.util;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import java.util.List;
import java.util.Map;

/**
 * Utility class for interacting with Googleâ€™s Generative Language API using the Gemini-2.0 Flash model.
 * It sends the text to be summarized as a JSON payload and returns the summary from the first candidate.
 * The API key is read from the environment variable GEMINI_API_KEY.
 */
public class GeminiAPI {

    // Base endpoint without the key parameter.
    private static final String BASE_ENDPOINT = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

    /**
     * Summarizes the given raw text by calling the Gemini API.
     *
     * @param text The raw text to summarize.
     * @return The summary generated by the API.
     */
    public static String summarize(String text) {
        String apiKey = System.getenv("GEMINI_API_KEY");
        if (apiKey == null || apiKey.isEmpty()) {
            throw new RuntimeException("GEMINI_API_KEY environment variable is not set.");
        }

        String endpoint = BASE_ENDPOINT + "?key=" + apiKey;
        try {
            URL url = new URL(endpoint);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);
            // Set headers
            connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");

            // Build the JSON payload as per the provided curl command
            // The text to summarize is included as the value for "text" in "parts"
            String payload = "{\"contents\": [{\"parts\": [{\"text\": \"" + escapeJson(text) + "\"}]}]}";

            try (DataOutputStream wr = new DataOutputStream(connection.getOutputStream())) {
                wr.write(payload.getBytes("UTF-8"));
                wr.flush();
            }

            int responseCode = connection.getResponseCode();
            BufferedReader in;
            if (responseCode >= 200 && responseCode < 300) {
                in = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF-8"));
            } else {
                in = new BufferedReader(new InputStreamReader(connection.getErrorStream(), "UTF-8"));
            }
            StringBuilder response = new StringBuilder();
            String line;
            while ((line = in.readLine()) != null) {
                response.append(line);
            }
            in.close();

            if (responseCode >= 200 && responseCode < 300) {
                // Parse the JSON response using Jackson.
                ObjectMapper mapper = new ObjectMapper();
                Map<String, Object> jsonResponse = mapper.readValue(response.toString(), new TypeReference<Map<String, Object>>() {});
                
                // Expecting a "candidates" field which is a list of maps.
                if (jsonResponse.containsKey("candidates")) {
                    List<Map<String, Object>> candidates = (List<Map<String, Object>>) jsonResponse.get("candidates");
                    if (!candidates.isEmpty() && candidates.get(0).containsKey("output")) {
                        return candidates.get(0).get("output").toString();
                    }
                }
                throw new RuntimeException("Unexpected JSON structure in Gemini API response: " + response.toString());
            } else {
                throw new RuntimeException("Failed to get summary from Gemini API. Response code: " 
                        + responseCode + ". Response: " + response.toString());
            }
        } catch (Exception e) {
            throw new RuntimeException("Error calling Gemini API: " + e.getMessage(), e);
        }
    }

    /**
     * Escapes JSON special characters in the provided text.
     *
     * @param text The input text.
     * @return The escaped text.
     */
    private static String escapeJson(String text) {
        return text.replace("\\", "\\\\")
                   .replace("\"", "\\\"")
                   .replace("\n", "\\n")
                   .replace("\r", "\\r");
    }
}
